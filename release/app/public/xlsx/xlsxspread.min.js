var XLSXspread = (function () {
  var fontsizes = [
    7.5, 8, 9, 10, 10.5, 11, 12, 14, 15, 16, 18, 22, 24, 26, 36, 42,
  ];
  function get_font_size(sz) {
    for (var j = 0; j < fontsizes.length; ++j)
      if (sz <= fontsizes[j]) return fontsizes[j];
    return fontsizes[fontsizes.length - 1];
  }
  function process_style(sty) {
    var s = {};
    if (
      typeof sty.bgcolor == 'string' &&
      sty.bgcolor.match(/^#[0-9A-Fa-f]{6}$/)
    )
      s.fgColor = { rgb: sty.bgcolor.slice(1) };
    if (typeof sty.color == 'string' && sty.color.match(/^#[0-9A-Fa-f]{6}$/))
      s.color = { rgb: sty.color.slice(1) };
    if (sty.underline != null) s.underline = +!!sty.underline;
    if (sty.strike != null) s.strike = !!sty.strike;
    if (sty.textwrap) {
      if (!s.alignment) s.alignment = {};
      s.alignment.wrapText = true;
    }
    if (sty.align) {
      if (!s.alignment) s.alignment = {};
      s.alignment.horizontal = sty.align;
    }
    if (sty.valign) {
      if (!s.alignment) s.alignment = {};
      s.alignment.vertical = sty.valign;
      if (s.alignment.vertical == 'middle') s.alignment.vertical = 'center';
    }
    if (sty.font) {
      if (sty.font.bold != null) s.bold = sty.font.bold;
      if (sty.font.italic != null) s.italic = sty.font.italic;
      if (sty.font.name) s.name = sty.font.name;
      if (sty.font.size) s.sz = +sty.font.size;
    }
    return s;
  }
  function add_style(styles, style, value) {
    var SZ = get_font_size(style.sz || 11);
    var BGCOLOR = '';
    if (style.fgColor && style.fgColor.rgb != null)
      BGCOLOR = (
        typeof style.fgColor.rgb == 'number'
          ? style.fgColor.rgb.toString(16)
          : style.fgColor.rgb
      ).padStart(6, '0');
    var COLOR = '';
    if (style.color && style.color.rgb != null)
      COLOR = (
        typeof style.color.rgb == 'number'
          ? style.color.rgb.toString(16)
          : style.color.rgb
      ).padStart(6, '0');
    var HALIGN = '',
      VALIGN = 'bottom';
    switch (typeof value) {
      case 'string':
        HALIGN = 'left';
        break;
      case 'number':
        HALIGN = 'right';
        break;
    }
    if (style.alignment) {
      if (style.alignment.horizontal) HALIGN = style.alignment.horizontal;
      if (style.alignment.vertical) VALIGN = style.alignment.vertical;
    }
    if (HALIGN == 'justify') HALIGN = 'left';
    if (VALIGN == 'center') VALIGN = 'middle';
    var border = {};
    for (var j = 0; j < styles.length; ++j) {
      var S = styles[j];
      if (!!style.bold != !!(S.font && S.font.bold)) continue;
      if (!!style.italic != !!(S.font && S.font.italic)) continue;
      if (style.name != ((S.font && S.font.name) || 'Calibri')) continue;
      if (SZ != ((S.font && S.font.size) || 11)) continue;
      if (!!style.underline != !!S.underline) continue;
      if (!!style.strike != !!S.strike) continue;
      if (!!(style.alignment && style.alignment.wrapText) != !!S.textwrap)
        continue;
      if (BGCOLOR != (S.bgcolor || '').replace(/#/, '')) continue;
      if (COLOR != (S.color || '').replace(/#/, '')) continue;
      if (HALIGN != (S.align || '')) continue;
      if (VALIGN != (S.valign || '')) continue;
      return j;
    }
    var sdata = {
      underline: !!style.underline,
      strike: !!style.strike,
      textwrap: !!(style.alignment && style.alignment.wrapText),
      align: HALIGN,
      valign: VALIGN,
      font: {
        bold: !!style.bold,
        italic: !!style.italic,
        name: style.name || 'Calibri',
        size: SZ,
      },
      border: border,
    };
    if (BGCOLOR) sdata.bgcolor = '#' + BGCOLOR;
    if (COLOR) sdata.color = '#' + COLOR;
    styles.push(sdata);
    return styles.length - 1;
  }
  function stox(wb) {
    var out = [];
    wb.SheetNames.forEach(function (name) {
      var o = {
        name: name,
        rows: {},
        merges: [],
        styles: [{ font: { name: 'Calibri' } }],
        cols: {},
      };
      var ws = wb.Sheets[name];
      var range = XLSX.utils.decode_range(ws['!ref'] || "A1:Z100");
      var rows = ws['!rows'] || [];
      for (var R = 0; R <= range.e.r; ++R) {
        var cells = {};
        o.rows[R] = { cells: cells };
        for (var C = 0; C <= range.e.c; ++C) {
          var addr = XLSX.utils.encode_cell({ r: R, c: C });
          if (!ws[addr]) continue;
          var cell = ws[addr];
          cells[C] = {};
          if (cell.t != 'z') {
            cells[C].text = String(cell.w || cell.v);
            cells[C].type = cell.t == 'n' ? 'number' : 'string';
          }
          if (cell.s) cells[C].style = add_style(o.styles, cell.s, cell.v);
        }
        if (rows[R]) {
          if (rows[R].hpx || rows[R].hpt)
            o.rows[R].height = rows[R].hpx || rows[R].hpt;
        }
      }
      (ws['!merges'] || []).forEach(function (m) {
        var mergestr = typeof m == 'string' ? m : XLSX.utils.encode_range(m);
        o.merges.push(mergestr);
        var mergeobj = XLSX.utils.decode_range(mergestr);
        if (!o.rows[mergeobj.s.r]) return;
        if (!o.rows[mergeobj.s.r].cells[mergeobj.s.c]) return;
        o.rows[mergeobj.s.r].cells[mergeobj.s.c].merge = [
          mergeobj.e.r - mergeobj.s.r,
          mergeobj.e.c - mergeobj.s.c,
        ];
      });
      if (ws['!cols'])
        ws['!cols'].forEach(function (col, C) {
          if (col && col.wpx) o.cols[C] = { width: col.wpx };
        });
      if (ws['!freeze']) {
        var freezecell =
          typeof ws['!freeze'] == 'string'
            ? ws['!freeze']
            : XLSX.utils.encode_cell(ws['!freeze']);
        o.freeze = freezecell;
      } else o.freeze = 'A1';
      // 根据数据行数显示多少行
      o.rows.len = range.e.r + 1;
      out.push(o);
    });
    console.log('import data:', out);
    return out;
  }
  function xtos(sdata) {
    var out = XLSX.utils.book_new();
    sdata.forEach(function (xws) {
      var aoa = [[]];
      var rowobj = xws.rows;
      var styles = (xws.styles || []).map(function (style) {
        return process_style(style);
      });
      var rows = [];
      for (var ri = 0; ri < rowobj.len; ++ri) {
        var row = rowobj[ri];
        if (!row) continue;
        aoa[ri] = [];
        if (row.height != null) rows[ri] = { hpt: row.height };
        Object.keys(row.cells).forEach(function (k) {
          var idx = +k;
          if (isNaN(idx)) return;
          aoa[ri][idx] = {};
          if (row.cells[k].type == 'number' && isFinite(+row.cells[k].text)) {
            aoa[ri][idx].t = 'n';
            aoa[ri][idx].v = +row.cells[k].text;
          } else if (!row.cells[k].type && !row.cells[k].text) {
            aoa[ri][idx].t = 'z';
          } else {
            aoa[ri][idx].t = 's';
            aoa[ri][idx].v = row.cells[k].text;
          }
          if (row.cells[k].style != null)
            aoa[ri][idx].s = styles[row.cells[k].style];
        });
      }
      var ws = XLSX.utils.aoa_to_sheet(aoa);
      if (xws.merges && xws.merges.length) {
        if (!ws['!merges']) ws['!merges'] = [];
        xws.merges.forEach(function (merge) {
          ws['!merges'].push(XLSX.utils.decode_range(merge));
        });
      }
      XLSX.utils.book_append_sheet(out, ws, xws.name);
      if (xws.freeze) ws['!freeze'] = xws.freeze;
      ws['!rows'] = rows;
      if (xws.cols) {
        var cols = [];
        for (var j = 0; j <= xws.cols.len; ++j) {
          if (xws.cols[j] && xws.cols[j].width)
            cols[j] = { wpx: xws.cols[j].width };
        }
        ws['!cols'] = cols;
      }
    });
    return out;
  }
  return { xtos: xtos, stox: stox };
})();
